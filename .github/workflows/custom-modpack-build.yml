name: Custom version modpack build

on:
  workflow_dispatch:
    inputs:
      daxxl-tag:
        description: DAXXL Tag to build
        default: nightly
        type: string
        required: true

jobs:
  modpack-build:
    name: Build ${{ inputs.daxxl-tag }}
    runs-on: ubuntu-latest
    env:
      DAXXL_TAG: ${{ inputs.daxxl-tag }}
    steps:
      #  check-out repo and set-up python
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NIGHTLY_GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Verify manifest
        shell: bash
        run: |
          jq -e >/dev/null < "release/manifests/${DAXXL_TAG}.json"
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.5
      - name: Setup private repo access token
        shell: bash
        run: echo "${{ secrets.NIGHTLY_GITHUB_TOKEN }}" > ~/.github_personal_token

      # install & configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock', '*/poetry.lock') }}

      # install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # install your root project, if required
      - name: Install library
        run: poetry install --no-interaction

      - name: Get current date
        id: date
        shell: bash
        run: |
          echo "today=$(date --iso-8601)+${{ github.run_number }}" >> "$GITHUB_OUTPUT"
          echo "cachedate=$(date '+%G-w%V')" >> "$GITHUB_OUTPUT"

      - name: Load cached mod zips
        id: load_mod_cache
        uses: actions/cache/restore@v4
        with:
          path: cache
          key: daxxl-${{ runner.os }}-${{ inputs.daxxl-tag }}-${{ steps.date.outputs.cachedate }}
          restore-keys: |
            daxxl-${{ runner.os }}-${{ inputs.daxxl-tag }}-
            daxxl-${{ runner.os }}-

      - name: Build modpack archives
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_GITHUB_TOKEN }}
        run: |
          poetry run python -m gtnh.cli.download_release "${DAXXL_TAG}"
          poetry run python -m gtnh.cli.assemble_release CLIENT "${DAXXL_TAG}"
          poetry run python -m gtnh.cli.assemble_release SERVER "${DAXXL_TAG}"
          poetry run python -m gtnh.cli.assemble_release CLIENT_JAVA9 "${DAXXL_TAG}"
          poetry run python -m gtnh.cli.assemble_release SERVER_JAVA9 "${DAXXL_TAG}"

      - name: Save cached mod zips
        uses: actions/cache/save@v4
        if: steps.load_mod_cache.outputs.cache-hit != 'true'
        with:
          path: cache
          key: daxxl-${{ runner.os }}-${{ inputs.daxxl-tag }}-${{ steps.date.outputs.cachedate }}

      # Upload modpack

      - name: Upload manifest
        uses: actions/upload-artifact@v4
        # Upload all archives even if one of the zips fails to upload
        if: success() || failure()
        with:
          name: gtnh-${{ inputs.daxxl-tag }}-manifest.json
          path: releases/manifests/${{ inputs.daxxl-tag }}.json

      - name: Upload manifest job summary
        shell: bash
        if: success() || failure()
        continue-on-error: true
        run: |
          echo "# GTNH build ${{ inputs.daxxl-tag }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "## Github mods" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Mod | Version | Side |" >> "$GITHUB_STEP_SUMMARY"
          echo "| --- | ------- | ---- |" >> "$GITHUB_STEP_SUMMARY"
          jq -r '.github_mods | keys[] as $k | ["", $k, .[$k].version, .[$k].side, ""] | join(" | ") | ltrimstr(" ")' "releases/manifests/${DAXXL_TAG}.json" | sort -f >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "## External mods" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Mod | Version | Side |" >> "$GITHUB_STEP_SUMMARY"
          echo "| --- | ------- | ---- |" >> "$GITHUB_STEP_SUMMARY"
          jq -r '.external_mods | keys[] as $k | ["", $k, .[$k].version, .[$k].side, ""] | join(" | ") | ltrimstr(" ")' "releases/manifests/${DAXXL_TAG}.json" | sort -f >> "$GITHUB_STEP_SUMMARY"

      - name: Relocate built zips
        shell: bash
        run: |
          mv "releases/zip/GT_New_Horizons_${DAXXL_TAG}_Server_Java_8.zip" "GTNH-${DAXXL_TAG}-server.zip"
          mv "releases/zip/GT_New_Horizons_${DAXXL_TAG}_Server_Java_17-21.zip" "GTNH-${DAXXL_TAG}-server-new-java.zip"
          mv "releases/multi_poly/GT_New_Horizons_${DAXXL_TAG}_Java_8.zip" "GTNH-${DAXXL_TAG}-mmcprism-java8.zip"
          mv "releases/multi_poly/GT_New_Horizons_${DAXXL_TAG}_Java_17-21.zip" "GTNH-${DAXXL_TAG}-mmcprism-new-java.zip"

      - name: Upload server zip
        uses: actions/upload-artifact@v4
        # Upload all archives even if one of the zips fails to upload
        if: success() || failure()
        with:
          name: gtnh-${{ inputs.daxxl-tag }}-${{ steps.date.outputs.today }}-server
          path: GTNH-${{ inputs.daxxl-tag }}-server.zip
          compression-level: 0 # already compressed by Python

      - name: Upload modern java server zip
        uses: actions/upload-artifact@v4
        # Upload all archives even if one of the zips fails to upload
        if: success() || failure()
        with:
          name: gtnh-${{ inputs.daxxl-tag }}-${{ steps.date.outputs.today }}-server-new-java
          path: GTNH-${{ inputs.daxxl-tag }}-server-new-java.zip
          compression-level: 0 # already compressed by Python

      - name: Upload MMC zip
        uses: actions/upload-artifact@v4
        # Upload all archives even if one of the zips fails to upload
        if: success() || failure()
        with:
          name: gtnh-${{ inputs.daxxl-tag }}-${{ steps.date.outputs.today }}-mmcprism-java8
          path: GTNH-${{ inputs.daxxl-tag }}-mmcprism-java8.zip
          compression-level: 0 # already compressed by Python

      - name: Upload modern java Prism zip
        uses: actions/upload-artifact@v4
        # Upload all archives even if one of the zips fails to upload
        if: success() || failure()
        with:
          name: gtnh-${{ inputs.daxxl-tag }}-${{ steps.date.outputs.today }}-mmcprism-new-java
          path: GTNH-${{ inputs.daxxl-tag }}-mmcprism-new-java.zip
          compression-level: 0 # already compressed by Python
